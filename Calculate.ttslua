-- #include CalculateGUI

local Calculate = {}
Calculate.zoneId = '162f27'

-- Stores card choices (keep/scrap, A or B)
Calculate.cardStates = {
}

Calculate.Factions = {
    YELLOW = 1,
    RED = 2,
    BLUE = 3,
    GREEN = 4
}

Calculate.FactionNames = {
    ["Star Empire"] = 1,
    ["Machine Cult"] = 2,
    ["Trade Federation"] = 3,
    ["Blob"] = 4,
    ["Unaligned"]  = 5
}

Calculate.ResultObjects = {'9834ef'}
Calculate.combatTokenGuid = 'be47c5'
Calculate.combatToken = {}

Calculate.tableGuid = '4ee1f2'
Calculate.inactiveButtonColour = color(255, 255, 255, 0.6)

function Calculate.init()

    Calculate.table = getObjectFromGUID(Calculate.tableGuid)
    
    Calculate.combatToken = getObjectFromGUID(Calculate.combatTokenGuid)
    Calculate.combatToken.createButton({
        click_function = "YoureNotSupposedToClickThis",
        label          = "",
        position       = vector(0, 0.2, 0),
        width          = 0,
        height         = 0,
        font_size      = 600,
        color          = color(0, 0, 0, 1),
        font_color     = color(0.2, 0.2, 0.2, 1),
    })
    
    Calculate.DoTheMath()
end

function onObjectEnterScriptingZone(zone, obj)
    if zone.getGUID() == Calculate.zoneId then
        Calculate.DoTheMath(obj)
    end
end

function onObjectLeaveScriptingZone(zone, obj)
    if zone.getGUID() == Calculate.zoneId then
        Calculate.DoTheMath()
        
        if obj.getButtons() ~= nil then
            obj.clearButtons()
            Calculate.cardStates[obj.getGUID()] = nil
        end
    end
end

function Calculate.DoTheMath(draggedObj)
    local zone = getObjectFromGUID(Calculate.zoneId)
    local allCards = zone.getObjects()
    
    local factionCounts = {
        0, 0, 0, 0, 0
    };
    
    -- TODO: Make sure the object is not in the table yet
    if draggedObj != nil then
        table.insert(allCards, draggedObj)
    end
    
    local cards = {}
    for i, e in pairs(allCards) do
        local name = e.getName()
        if name ~= nil and name ~= "" and e.name == "Card" then
            table.insert(cards, {
                name = name,
                obj = e
            })
            
            log("Name = " .. name)
            log("Faction = " .. CardLibrary[name].faction)
            
            local factionNum = Calculate.FactionNames[CardLibrary[name].faction]
            factionCounts[factionNum] = factionCounts[factionNum] + 1
        end
    end
    
    log("Doing the math")
    
    local trade = 0
    local combat = 0
    local authority = 0
    for i, card in pairs(cards) do
        local name = card.name
        
        trade = trade + (CardLibrary[name].main.trade or 0)
        combat = combat + (CardLibrary[name].main.combat or 0)
        authority = authority + (CardLibrary[name].main.authority or 0)
        
        if CardLibrary[name].main.xor ~= nil then
            
            local xor = CardLibrary[name].main.xor
            if card.obj.getButtons() == nil then
                local keys = {}
                for k,v in pairs(xor) do
                    if k == "combat" then
                        table.insert(keys, v .. " Combat")
                    elseif k == "trade" then
                        table.insert(keys, v .. " Trade")
                    elseif k == "authority" then
                        table.insert(keys, v .. " Authority")
                    elseif k == "special" then
                        table.insert(keys, "Ability")
                    else
                        table.insert(keys, k)
                    end
                end
                
                AddChoiceButtons({
                    obj = card.obj,
                    isBase = CardLibrary[name].type == "Base",
                    leftClickFunction = "OptA",
                    leftText = keys[1],
                    leftColor = color(0, 200, 0, 1),
                    leftHoverColor = color(0, 200, 0, 1),
                    rightClickFunction = "OptB",
                    rightText = keys[2],
                    rightColor = Calculate.inactiveButtonColour,
                    rightHoverColor = color(0, 200, 0, 1)
                })
                
                Calculate.cardStates[card.obj.getGUID()] = { choiceA = true }
            end
            
            local firstChoice = true
            for k,v in pairs(xor) do
                if (firstChoice and Calculate.cardStates[card.obj.getGUID()].choiceA) or (not firstChoice and not Calculate.cardStates[card.obj.getGUID()].choiceA) then
                    if k == "combat" then
                        combat = combat + v
                    elseif k == "trade" then
                        trade = trade + v
                    elseif k == "authority" then
                        authority = authority + v
                    end
                end
                firstChoice = false
            end
        end
        
        local factionNum = Calculate.FactionNames[CardLibrary[name].faction]
        if factionCounts[factionNum] > 1 and CardLibrary[name].ally ~= nil then
            trade = trade + (CardLibrary[name].ally.trade or 0)
            combat = combat + (CardLibrary[name].ally.combat or 0)
            authority = authority + (CardLibrary[name].ally.authority or 0)
        end
        
        if CardLibrary[name].scrap ~= nil then
            if card.obj.getButtons() == nil then
                AddChoiceButtons({
                    obj = card.obj,
                    isBase = CardLibrary[name].type == "Base",
                    leftClickFunction = "Keep",
                    leftText = "Keep",
                    leftColor = color(0, 200, 0, 1),
                    leftHoverColor = color(0, 200, 0, 1),
                    rightClickFunction = "Scrap",
                    rightText = "Scrap",
                    rightColor = Calculate.inactiveButtonColour,
                    rightHoverColor = color(200, 0, 0, 1)
                })
                
                Calculate.cardStates[card.obj.getGUID()] = { scrapping = false }
            end
            
            if Calculate.cardStates[card.obj.getGUID()].scrapping then
                trade = trade + (CardLibrary[name].scrap.trade or 0)
                combat = combat + (CardLibrary[name].scrap.combat or 0)
                authority = authority + (CardLibrary[name].scrap.authority or 0)
            end
        end
    end
    
    log(trade .. " Trade")
    log(combat .. " Combat")
    log(authority .. " Authority")
    
    Calculate.combatToken.editButton({
        index = 0,
        label = combat,
    })
    -- log(Calculate.combatToken.getName())
    Calculate.combatToken.setName(combat .. " Combat")
    
end

function AddChoiceButtons(args)
    local isBase = args.isBase or false;
    
    local rot = vector(0, 0, 0)
    local leftButtonPos = vector(-0.6, 2, 1.9)
    local rightButtonPos = vector(0.6, 2, 1.9)
    if isBase then
        log(isBase)
        rot = vector(0, -90, 0)
        leftButtonPos = vector(1.5, 2, 0.6)
        rightButtonPos = vector(1.5, 2, -0.6)
    end
    
    args.obj.createButton({
        click_function = args.leftClickFunction,
        label          = args.leftText,
        position       = leftButtonPos,
        rotation       = rot,
        width          = 500,
        height         = 300,
        font_size      = 100,
        color          = args.leftColor,
        hover_color    = args.leftHoverColor,
        press_color    = args.leftHoverColor,
        font_color     = color(0, 0, 0, 1),
    })
    
    args.obj.createButton({
        click_function = args.rightClickFunction,
        label          = args.rightText,
        position       = rightButtonPos,
        rotation       = rot,
        width          = 500,
        height         = 300,
        font_size      = 100,
        color          = args.rightColor,
        hover_color    = args.rightHoverColor,
        press_color    = args.rightHoverColor,
        font_color     = color(0, 0, 0, 1),
    })
end

function Keep(obj, player_clicker_color, alt_click)
    -- Keep
    obj.editButton({ index = 0, color = color(0, 200, 0, 1) })
    
    -- scrap
    obj.editButton({ index = 1, color = Calculate.inactiveButtonColour })
    
    Calculate.cardStates[obj.getGUID()].scrapping = false
    Calculate.DoTheMath()
end

function Scrap(obj, player_clicker_color, alt_click)
    -- keep
    obj.editButton({ index = 0, color = Calculate.inactiveButtonColour })
    
    -- scrap
    obj.editButton({ index = 1, color = color(200, 0, 0, 1) })
    
    Calculate.cardStates[obj.getGUID()].scrapping = true
    Calculate.DoTheMath()
end


function OptA(obj, player_clicker_color, alt_click)
    -- OptA
    obj.editButton({ index = 0, color = color(0, 200, 0, 1) })
    
    -- OptB
    obj.editButton({ index = 1, color = Calculate.inactiveButtonColour })
    
    Calculate.cardStates[obj.getGUID()].choiceA = true
    Calculate.DoTheMath()
end

function OptB(obj, player_clicker_color, alt_click)
    -- OptA
    obj.editButton({ index = 0, color = Calculate.inactiveButtonColour })
    
    -- OptB
    obj.editButton({ index = 1, color = color(0, 200, 0, 1) })
    
    Calculate.cardStates[obj.getGUID()].choiceA = false
    Calculate.DoTheMath()
end
