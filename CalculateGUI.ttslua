

Calculate.inactiveButtonColour = color(255, 255, 255, 0.6)

function Calculate.AddArbitraryChoiceButtons(args)
    Calculate.AddChoiceButtons({
        obj = args.obj,
        isBase = args.isBase,
        leftClickFunction = "OptA",
        leftText = args.leftText,
        leftColor = color(0, 200, 0, 1),
        leftHoverColor = color(0, 200, 0, 1),
        rightClickFunction = "OptB",
        rightText = args.rightText,
        rightColor = Calculate.inactiveButtonColour,
        rightHoverColor = color(0, 200, 0, 1)
    })
end

function Calculate.AddScrapChoiceButtons(args)
    Calculate.AddChoiceButtons({
        obj = args.obj,
        isBase = args.isBase,
        leftClickFunction = "Keep",
        leftText = "Keep",
        leftColor = color(0, 200, 0, 1),
        leftHoverColor = color(0, 200, 0, 1),
        rightClickFunction = "Scrap",
        rightText = "Scrap",
        rightColor = Calculate.inactiveButtonColour,
        rightHoverColor = color(200, 0, 0, 1)
    })
end

function Calculate.AddChoiceButtons(args)
    local isBase = args.isBase or false;
    
    local rot = vector(0, 0, 0)
    local leftButtonPos = vector(-0.6, 2, 1.9)
    local rightButtonPos = vector(0.6, 2, 1.9)
    if isBase then
        rot = vector(0, -90, 0)
        leftButtonPos = vector(1.5, 2, 0.6)
        rightButtonPos = vector(1.5, 2, -0.6)
    end
    
    args.obj.createButton({
        click_function = args.leftClickFunction,
        label          = args.leftText,
        position       = leftButtonPos,
        rotation       = rot,
        width          = 500,
        height         = 300,
        font_size      = 100,
        color          = args.leftColor,
        hover_color    = args.leftHoverColor,
        press_color    = args.leftHoverColor,
        font_color     = color(0, 0, 0, 1),
        tooltip        = args.leftText
    })
    
    args.obj.createButton({
        click_function = args.rightClickFunction,
        label          = args.rightText,
        position       = rightButtonPos,
        rotation       = rot,
        width          = 500,
        height         = 300,
        font_size      = 100,
        color          = args.rightColor,
        hover_color    = args.rightHoverColor,
        press_color    = args.rightHoverColor,
        font_color     = color(0, 0, 0, 1),
        tooltip        = args.rightText
    })
end

function Calculate.AddDescriptionButton(args)
    local centerButtonPos = vector(-0.6, 2, 1.9)
    if args.isBase then
        rot = vector(0, -90, 0)
        centerButtonPos = vector(1.5, 2, 0)
    end
    
    args.obj.createButton({
        click_function = "Dummy",
        label          = args.text,
        position       = centerButtonPos,
        rotation       = rot,
        width          = 800,
        height         = 300,
        font_size      = 150,
        color          = color(200, 200, 200, 1),
        hover_color    = color(200, 200, 200, 1),
        press_color    = color(200, 200, 200, 1),
        font_color     = color(0, 0, 0, 1),
        tooltip        = args.text
    })
end

function Keep(obj, player_clicker_color, alt_click)
    -- Keep
    obj.editButton({ index = 0, color = color(0, 200, 0, 1) })
    
    -- scrap
    obj.editButton({ index = 1, color = Calculate.inactiveButtonColour })
    
    Calculate.cardStates[obj.getGUID()].scrapping = false
    Calculate.DoAllTheMath()
end

function Scrap(obj, player_clicker_color, alt_click)
    -- keep
    obj.editButton({ index = 0, color = Calculate.inactiveButtonColour })
    
    -- scrap
    obj.editButton({ index = 1, color = color(200, 0, 0, 1) })
    
    Calculate.cardStates[obj.getGUID()].scrapping = true
    Calculate.DoAllTheMath()
end


function OptA(obj, player_clicker_color, alt_click)
    -- OptA
    obj.editButton({ index = 0, color = color(0, 200, 0, 1) })
    
    -- OptB
    obj.editButton({ index = 1, color = Calculate.inactiveButtonColour })
    
    Calculate.cardStates[obj.getGUID()].choiceA = true
    Calculate.DoAllTheMath()
end

function OptB(obj, player_clicker_color, alt_click)
    -- OptA
    obj.editButton({ index = 0, color = Calculate.inactiveButtonColour })
    
    -- OptB
    obj.editButton({ index = 1, color = color(0, 200, 0, 1) })
    
    Calculate.cardStates[obj.getGUID()].choiceA = false
    Calculate.DoAllTheMath()
end

function Dummy()
end
