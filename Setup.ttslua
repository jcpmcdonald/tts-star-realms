#include SetupUI
#include SetupCommanders

local Setup = {}

Setup.MenuAnchor = nil
Setup.PlayerCount = 2

Setup.ExtraComponentsBagId = 'd233c5'

Setup.TradePilePosition = vector(14.08, 3.42, -2.85)

Setup.MainDecks = {
    standard = 'ce833d',
    colonyWars = 'c7ce67',
    frontiers = '441971'
}

Setup.Seats = {
    {
        seat = "up",
        colour = "Green",
        drawDeck = {
            id = '3695d5',
            position = vector(-19.69, 3.47, -21.34),
            rotation = vector(0, 180, 0)
        },
        gambitPositions = {
            {-16.14, 3.42, -21.32},
            {-16.13, 3.42, -25.26},
            {10.59, 3.42, -21.35},
            {10.58, 3.42, -25.24}
        },
        commanderPosition = {-19.69, 3.51, -25.68}
    },
    {
        seat = "right",
        colour = "Blue",
        drawDeck = {
            id = '44500a',
            position = vector(-29.22, 3.47, 16.42),
            rotation = vector(0, -90, 0)
        },
        gambitPositions = {
            {-29.21, 3.42, 12.90},
            {-33.14, 3.42, 12.91},
            {-29.23, 3.42, -13.83},
            {-33.13, 3.42, -13.82}
        },
        commanderPosition = {-33.57, 3.46, 16.42},
    },
    {
        seat = "down",
        colour = "Orange",
        drawDeck = {
            id = '8ef2bb',
            position = vector(18.74, 3.47, 15.92),
            rotation = vector(0, 0, 0)
        },
        gambitPositions = {
            {15.22, 3.42, 15.92},
            {15.23, 3.42, 19.85},
            {-11.55, 3.42, 15.91},
            {-11.52, 3.42, 19.83}
        },
        commanderPosition = {18.74, 3.46, 20.30},
    },
    {
        seat = "left",
        colour = "Red",
        drawDeck = {
            id = '85f95a',
            position = vector(27.12, 3.47, -21.97),
            rotation = vector(0, 90, 0)
        },
        gambitPositions = {
            {27.13, 3.42, -18.46},
            {31.05, 3.42, -18.46},
            {27.14, 3.42, 8.29},
            {31.05, 3.42, 8.28}
        },
        commanderPosition = {31.37, 3.46, -21.97},
    },
}

Setup.CommanderOffset = vector(0, 0, 5)


function Setup.init()
    Setup.MenuAnchor = getObjectFromGUID('08a310')
    
    -- Don't show the menu button if the anchor is gone (will happen when loading a save game)
    if Setup.MenuAnchor ~= nil then
        Setup.MenuAnchor.createButton({
            click_function = "showSetupScreen",
            label = "Start a Game",
            position={0,3,0},
            width=2000,
            height=500,
            font_size=260,
            scale={3, 3, 3},
            rotation={0, 180, 0}
        })
    end
    
    SetupUI.init(Setup)
end

function setupGame_Coroutine()
    UI.hide("setupScreen")
    Setup.MenuAnchor.destruct()
    local extraComponentsBag = getObjectFromGUID(Setup.ExtraComponentsBagId)
    
    local playerFactions = {}
    
    local commanders = SetupCommanders.GetCommanders()
    
    local playerIndexes = getPlayers()
    playerIndexes = cycle(playerIndexes, math.random(0, #playerIndexes - 1))
    
    if commanders ~= nil then
        for i, playerIndex in pairs(playerIndexes) do
            SetupCommanders.DealCommanderToPlayer(commanders[i], playerIndex, i)
        end
    else
        Setup.dealStartingHands(playerIndexes)
    end
    
    if Setup.UseStandardDeck then
        local deck = getObjectFromGUID(Setup.MainDecks.standard)
        deck.takeObject({
            position = Setup.TradePilePosition + vector(0, 5, 0),
            rotation = {0, 180, -180}
        })
    end
    if Setup.UseColonyWarsDeck then
        local deck = getObjectFromGUID(Setup.MainDecks.colonyWars)
        deck.takeObject({
            position = Setup.TradePilePosition + vector(0, 6, 0),
            rotation = {0, 180, -180}
        })
    end
    if Setup.UseFrontiersDeck then
        local deck = getObjectFromGUID(Setup.MainDecks.frontiers)
        deck.takeObject({
            position = Setup.TradePilePosition + vector(0, 7, 0),
            rotation = {0, 180, -180}
        })
    end
    
    return 1
end

function putRemainingStartingCardsAway()
    local startingCardsDeck = getObjectFromGUID(Setup.StartingCardsDeckId)
    if startingCardsDeck ~= nil then
        local extraComponentsBag = getObjectFromGUID(Setup.ExtraComponentsBagId)
        extraComponentsBag.putObject(startingCardsDeck)
    end
end

function useBonusDeck(deckId)
    local bonusDeck = getObjectFromGUID(deckId)
    
    -- First card is only rules
    bonusDeck.takeObject({
        position          = bonusDeck.getPosition() +vector(0, 3, 0),
        rotation          = vector(0, 180, 180)
    })
    
    bonusDeck.flip()
    Setup.MerchantDeck.putObject(bonusDeck)
end

function getPlayers()
    local players = {}
    
    if Setup.PlayerCount == 4 then
        return {1, 2, 3, 4}
    elseif Setup.PlayerCount == 3 then
        if Player["Red"].seated then
            table.insert(players, 1, 4)
        end
        if Player["Orange"].seated or #players == 0 then
            table.insert(players, 1, 3)
        end
        if Player["Blue"].seated or #players == 1 then
            table.insert(players, 1, 2)
        end
        if Player["Green"].seated or #players == 2 then
            table.insert(players, 1, 1)
        end
    elseif Setup.PlayerCount == 2 then
        if Player["Red"].seated then
            table.insert(players, 1, 4)
        end
        if Player["Orange"].seated then
            table.insert(players, 1, 3)
        end
        if Player["Blue"].seated or #players == 0 then
            table.insert(players, 1, 2)
        end
        if Player["Green"].seated or #players == 1 then
            table.insert(players, 1, 1)
        end
    end
    
    return players
end

function cycle(list, times)
    local rv = list
    for i = 0,times,1 do
        local item = table.remove(list, 1)
        table.insert(list, item)
    end
    return rv
end

function Setup.dealStartingHands(players)
    for i, playerIndex in pairs(players) do
        local deck = getObjectFromGUID(Setup.Seats[playerIndex].drawDeck.id)
        deck.shuffle()
        local count = 5
        if i == 1 then
            count = 3
        elseif i == 2 then
            count = 4
        end
        
        deck.deal(count, Setup.Seats[playerIndex].colour)
    end
end
